type Candidate {
    id: ID!
    name: String!
    surname: String!
}

type Participant {
    id: ID!    
    email: String!
    secretToken: String
}

enum Status {
    New,
    Registration,
    Deployed,
    Finished
}

input SmartContractUpdateInputs {
    address: String!
    bytecode: String!
    abi: String! 
}

input ElectionUpdateInputs {
    status: Status
    title: String
    candidates: [CandidateInputs!]
    participants: [ParticipantInputs!]
    smartContract: SmartContractUpdateInputs
}

type SmartContract {
    bytecode: String!
    abi: String! 
    # Only deployed smart contracts have this field
    address: String
}

# Information about Election that smar contract was successfuly deployed on blockchain
type DeployedElection {
    id: ID!
    title: String!
    candidates: [Candidate!]!
    smartContract: SmartContract
}

type Election { 
    id: ID!
    status: Status!
    title: String!
    candidates: [Candidate!]!
    participants: [Participant!]!
    smartContract: SmartContract
    publicKeys: [String!]
}

input CandidateInputs {
    name: String!
    surname: String!
}

input CandidateUpdateInputs {
    name: String
    surname: String
}

input ParticipantInputs {
    email: String!
}

input ParticipantUpdateInputs {
    email: String!
}

type Query {
    # Returns active election owned by the user if have any
    # Gets user from the cookie
    getUserElection : Election

    # TODO: Introduce distinct type for the publicKey
    listVoterElections(publicKey: String!) : [DeployedElection!]!

    # TODO: Introduce distinct type for the publicKey
    getVoterElection(id: ID!) : DeployedElection
}

type Mutation {
    createElection : Election!
    updateElection(id: ID!, changes: ElectionUpdateInputs!) : Election!

    registerPublicKey(id: ID!, secretToken: String!, publicKey: String!) : Boolean!

    # TODO: This should be done in by updateElection 
    setElectionIntoPublicKeyWaitingStage(id: ID!) : Election!

    # id of the election 
    sendRegisterPublicKeysMail(id: ID!): Boolean!

    compileElectionSmartContract(id: ID!) : Election!

    finishElection : Boolean!
}
