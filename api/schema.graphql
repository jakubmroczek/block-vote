type Candidate {
    _id: ID!
    name: String!
    surname: String!
}

type Participant {
    _id: ID!    
    email: String!
    secretToken: String
}

enum Status {
    New,
    PublicKeyRegistration,
    Under,
    Finished
}

input ElectionUpdateInputs {
    status: Status
    title: String
    candidates: [CandidateInputs!]
    participants: [ParticipantInputs!]
}

type Bytecode {
    object: String!
}

type SmartContract {
    # TODO: Split into needed sections
    bytecode: Bytecode
}

type Election { 
    _id: ID!
    status: Status!
    title: String!
    candidates: [Candidate!]!
    participants: [Participant!]!
    smartContract: SmartContract
}

input CandidateInputs {
    name: String!
    surname: String!
}

input CandidateUpdateInputs {
    name: String
    surname: String
}

input ParticipantInputs {
    email: String!
}

input ParticipantUpdateInputs {
    email: String!
}

type Query {
    getElection(id: ID!) : Election
    listElection : [Election!]!

    # id of the election 
    sendRegisterPublicKeysMail(id: ID!): Boolean!
}

type Mutation {
    createElection : Election!
    updateElection(id: ID!, changes: ElectionUpdateInputs!) : Election!
    removeElection(id: ID!) : Boolean!

    registerPublicKey(electionID: ID!, secretToken: String!, publicKey: String!) : Boolean!

    setElectionIntoPublicKeyWaitingStage(id: ID!) : Election!

    # TODO: The update can do the same... Fix this
    deployElection(id: ID!) : Election!
}
