const Tx = require('ethereumjs-tx').Transaction;
const Web3 = require('web3');


// object from the backend
// TODO: We must persist the tx somehow, private key should be get from the metamask
// TODO: Rename this
export default function deploy(bytecode, abi, account, pk) {
  const selectedHost = 'http://127.0.0.1:8545';
  const web3 = new Web3(new Web3.providers.HttpProvider(selectedHost));

  const electionTitle = 'Election';
  const electionContract = new web3.eth.Contract([{ inputs: [{ internalType: 'string', name: 'electionTitle', type: 'string' }], stateMutability: 'nonpayable', type: 'constructor' }, {
    inputs: [{ internalType: 'string', name: 'name', type: 'string' }, { internalType: 'string', name: 'surname', type: 'string' }], name: 'addNewCandidate', outputs: [], stateMutability: 'nonpayable', type: 'function',
  }, {
    inputs: [],
    name: 'getCandidates',
    outputs: [{
      components: [{ internalType: 'string', name: 'name', type: 'string' }, { internalType: 'string', name: 'surname', type: 'string' }, { internalType: 'bytes32', name: 'id', type: 'bytes32' }, { internalType: 'uint256', name: 'votes', type: 'uint256' }], internalType: 'struct Election.Candidate[]', name: '', type: 'tuple[]',
    }],
    stateMutability: 'view',
    type: 'function',
  }, {
    inputs: [], name: 'getElectionTitle', outputs: [{ internalType: 'string', name: '', type: 'string' }], stateMutability: 'view', type: 'function',
  }, {
    inputs: [{ internalType: 'address', name: 'voter', type: 'address' }], name: 'hasVoterAlreadyVoted', outputs: [{ internalType: 'bool', name: '', type: 'bool' }], stateMutability: 'view', type: 'function',
  }, {
    inputs: [{ internalType: 'address', name: 'voter', type: 'address' }], name: 'isVoterRegistered', outputs: [{ internalType: 'bool', name: '', type: 'bool' }], stateMutability: 'view', type: 'function',
  }, {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }], name: 'm_candidates', outputs: [{ internalType: 'string', name: 'name', type: 'string' }, { internalType: 'string', name: 'surname', type: 'string' }, { internalType: 'bytes32', name: 'id', type: 'bytes32' }, { internalType: 'uint256', name: 'votes', type: 'uint256' }], stateMutability: 'view', type: 'function',
  }, {
    inputs: [{ internalType: 'address', name: 'voter', type: 'address' }], name: 'registerNewVoter', outputs: [], stateMutability: 'nonpayable', type: 'function',
  }, {
    inputs: [{ internalType: 'bytes32', name: 'candidateId', type: 'bytes32' }], name: 'vote', outputs: [], stateMutability: 'nonpayable', type: 'function',
  }]);

  electionContract.deploy({ data: '0x60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280601081526020017f4b75627573696f7765207779626f72790000000000000000000000000000000081525060049080519060200190620000a0929190620002f4565b506200011d6040518060400160405280600581526020017f4a616b75620000000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4d726f637a656b00000000000000000000000000000000000000000000000000815250620001c460201b60201c565b620001996040518060400160405280600581526020017f4a756c69610000000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f5361646c616b0000000000000000000000000000000000000000000000000000815250620001c460201b60201c565b620001be733d614385a08c9c797387b594cb39ce02bfde2be96200029960201b60201c565b62000482565b60008282604051602001620001db929190620003e4565b604051602081830303815290604052805190602001209050600060405180608001604052808581526020018481526020018381526020016000815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190805190602001906200025e929190620002f4565b5060208201518160010190805190602001906200027d929190620002f4565b5060408201518160020155606082015181600301555050505050565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033757805160ff191683800117855562000368565b8280016001018555821562000368579182015b82811115620003675782518255916020019190600101906200034a565b5b5090506200037791906200037b565b5090565b620003a091905b808211156200039c57600081600090555060010162000382565b5090565b90565b6000620003b0826200041f565b620003bc81856200042a565b9350620003ce8185602086016200043b565b620003d98162000471565b840191505092915050565b60006040820190508181036000830152620004008185620003a3565b90508181036020830152620004168184620003a3565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200045b5780820151818401526020810190506200043e565b838111156200046b576000848401525b50505050565b6000601f19601f8301169050919050565b610ec480620004926000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a69beaba1161005b578063a69beaba14610113578063e1246a781461012f578063e173730c14610162578063eb2119db1461018057610088565b806306a49fce1461008d5780633165d233146100ab5780634a386db3146100c7578063577c689a146100f7575b600080fd5b6100956101b0565b6040516100a29190610bfc565b60405180910390f35b6100c560048036038101906100c09190610965565b610367565b005b6100e160048036038101906100dc9190610965565b6103c2565b6040516100ee9190610c1e565b60405180910390f35b610111600480360381019061010c91906109b7565b610418565b005b61012d6004803603810190610128919061098e565b6104e7565b005b61014960048036038101906101449190610a23565b61056d565b6040516101599493929190610c92565b60405180910390f35b61016a6106da565b6040516101779190610c39565b60405180910390f35b61019a60048036038101906101959190610965565b61077c565b6040516101a79190610c1e565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561035e5783829060005260206000209060040201604051806080016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102905780601f1061026557610100808354040283529160200191610290565b820191906000526020600020905b81548152906001019060200180831161027357829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103325780601f1061030757610100808354040283529160200191610332565b820191906000526020600020905b81548152906001019060200180831161031557829003601f168201915b5050505050815260200160028201548152602001600382015481525050815260200190600101906101d4565b50505050905090565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000828260405160200161042d929190610c5b565b604051602081830303815290604052805190602001209050600060405180608001604052808581526020018481526020018381526020016000815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000190805190602001906104ae92919061082d565b5060208201518160010190805190602001906104cb92919061082d565b5060408201518160020155606082015181600301555050505050565b60008090505b60008054905081101561056057816000828154811061050857fe5b9060005260206000209060040201600201541415610553576000818154811061052d57fe5b906000526020600020906004020160030160008154809291906001019190505550610560565b80806001019150506104ed565b5061056a336107d2565b50565b6000818154811061057a57fe5b9060005260206000209060040201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106265780601f106105fb57610100808354040283529160200191610626565b820191906000526020600020905b81548152906001019060200180831161060957829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c45780601f10610699576101008083540402835291602001916106c4565b820191906000526020600020905b8154815290600101906020018083116106a757829003601f168201915b5050505050908060020154908060030154905084565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107725780601f1061074757610100808354040283529160200191610772565b820191906000526020600020905b81548152906001019060200180831161075557829003601f168201915b5050505050905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061086e57805160ff191683800117855561089c565b8280016001018555821561089c579182015b8281111561089b578251825591602001919060010190610880565b5b5090506108a991906108ad565b5090565b6108cf91905b808211156108cb5760008160009055506001016108b3565b5090565b90565b6000813590506108e181610e49565b92915050565b6000813590506108f681610e60565b92915050565b600082601f83011261090d57600080fd5b813561092061091b82610d12565b610ce5565b9150808252602083016020830185838301111561093c57600080fd5b610947838284610df6565b50505092915050565b60008135905061095f81610e77565b92915050565b60006020828403121561097757600080fd5b6000610985848285016108d2565b91505092915050565b6000602082840312156109a057600080fd5b60006109ae848285016108e7565b91505092915050565b600080604083850312156109ca57600080fd5b600083013567ffffffffffffffff8111156109e457600080fd5b6109f0858286016108fc565b925050602083013567ffffffffffffffff811115610a0d57600080fd5b610a19858286016108fc565b9150509250929050565b600060208284031215610a3557600080fd5b6000610a4384828501610950565b91505092915050565b6000610a588383610b74565b905092915050565b6000610a6b82610d4e565b610a758185610d71565b935083602082028501610a8785610d3e565b8060005b85811015610ac35784840389528151610aa48582610a4c565b9450610aaf83610d64565b925060208a01995050600181019050610a8b565b50829750879550505050505092915050565b610ade81610db6565b82525050565b610aed81610dc2565b82525050565b610afc81610dc2565b82525050565b6000610b0d82610d59565b610b178185610d82565b9350610b27818560208601610e05565b610b3081610e38565b840191505092915050565b6000610b4682610d59565b610b508185610d93565b9350610b60818560208601610e05565b610b6981610e38565b840191505092915050565b60006080830160008301518482036000860152610b918282610b02565b91505060208301518482036020860152610bab8282610b02565b9150506040830151610bc06040860182610ae4565b506060830151610bd36060860182610bde565b508091505092915050565b610be781610dec565b82525050565b610bf681610dec565b82525050565b60006020820190508181036000830152610c168184610a60565b905092915050565b6000602082019050610c336000830184610ad5565b92915050565b60006020820190508181036000830152610c538184610b3b565b905092915050565b60006040820190508181036000830152610c758185610b3b565b90508181036020830152610c898184610b3b565b90509392505050565b60006080820190508181036000830152610cac8187610b3b565b90508181036020830152610cc08186610b3b565b9050610ccf6040830185610af3565b610cdc6060830184610bed565b95945050505050565b6000604051905081810181811067ffffffffffffffff82111715610d0857600080fd5b8060405250919050565b600067ffffffffffffffff821115610d2957600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610daf82610dcc565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610e23578082015181840152602081019050610e08565b83811115610e32576000848401525b50505050565b6000601f19601f8301169050919050565b610e5281610da4565b8114610e5d57600080fd5b50565b610e6981610dc2565b8114610e7457600080fd5b50565b610e8081610dec565b8114610e8b57600080fd5b5056fea264697066735822122034984881358beb1a94d25d62a9072be0027d1400e377b35741b2e633661025a864736f6c63430006060033', arguments: ["Hello world"] })
    .send({
      from: account,
      gas: 1500000,
      gasPrice: '30000000000000',
    }, (error, transactionHash) => {console.log("Is there any error?");
     console.log(error); })
    .on('error', (error) => { })
    .on('transactionHash', (transactionHash) => { })
    .on('receipt', (receipt) => {
      console.log(receipt.contractAddress); // contains the new contract address
    })
    .on('confirmation', (confirmationNumber, receipt) => { })
    .then((newContractInstance) => {
      console.log(newContractInstance.options.address); // instance with the new contract address
    });
}
